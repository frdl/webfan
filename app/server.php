<?php
/**
 * Copyright  (c) 2015, Till Wehowski
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    This product includes software developed by the frdl/webfan.
 * 4. Neither the name of frdl/webfan nor the
 *    names of its contributors may be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY frdl/webfan ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL frdl/webfan BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 *     
 *   @vendor     frdl
 *   @package    webfan Application Composer Backend
 *   @filename   webfan.fexe.php
 *   @todo
 * 
 *   @state:     test/development
 *  
 * 
 */
namespace frdl\xGlobal; 


 
 
 
 
   
class webfanApp extends fexe    
{
	 const DEL='Âµ';
     const CMD = 'cmd';
	 
	 const HINT_NOTINSTALLED = 'The Program frdl/webfan is not installed properly, try to install via {___$$URL_INSTALLER_HTMLPAGE$$___}!';
	 
	 const DIR_PLUGIN = '.1.3.6.1.4.1.37553.8.1.8.8.5.65';
	
	 const APPFILE = 'app.php';
	
	 protected $aSess;
	 
	 protected $debug = false;
	 
	 protected $Console;
	 
	 protected $isAdmin = false;
	 
	 protected static $_db = null;
	
	 
	 protected $ComponentsManager = null;
	 
	 
	function __construct($file = null, $file_offset = null, $e_level = E_USER_ERROR){
	  parent::__construct($file, $file_offset, $e_level);
	}	
	
	 public static function db(){

		return self::$_db;
	 }
	
	 public function Request(mixed $args = null){
	 	
	 }
   
   
     protected function writeToConfigFile(){
       if(!isset($this->data['CONFIGFILE']) || !file_exists($this->data['CONFIGFILE'])){
              return false;
	   }
    	$file = $this->data['CONFIGFILE'];
    	
 	    	
				$php = "<?php
			 			/*
			 			  - Do not edit this file manually! 
			 			  Application Composer - Config
			 			  Download: http://www.webfan.de/install/
			 			  
			 			*/
			 			    if(isset(\$this) &&
			 			      ( 
			 			            get_class(\$this) === '\\frdl\xGlobal\webfan' 
			 			         || is_subclass_of(\$this, '\\frdl\ApplicationComposer\Command\CMD')  
			 			         || get_class(\$this) === 'frdl\xGlobal\webfan' 
			 			         || is_subclass_of(\$this, 'frdl\ApplicationComposer\Command\CMD')
			 			      )){
                         	     \$this->data['config'] = ".var_export($this->data['config'], true).";								
							}		 			
                        ";
			 			
		try{
			chmod($file,0755);
		}	catch(\Exception $e){
			
		} 			
		if(false !== file_put_contents($file, $php))	 			{
		try{
			chmod($file,0644);
		}	catch(\Exception $e){
			
		} 				
			return true;
		}else{
			return false;
		}

			 			
   }
	   
   public function loadConfigFromFile($required = true){
	   $data = $this->data(); 
		 
		 
       if( (false !== $required && !isset($data['CONFIGFILE']) || !file_exists($data['CONFIGFILE']))){
              return false;
	   }
		 $file = $data['CONFIGFILE']; 
		 if(false !== $required){
		 	 require $file;
		 }else{
		 	 include $file;
		 }
		
 	 return true;
   }
   
   
	 
	 public function data(Array $data = null){
	 	

	 	 	
	 	
	 	
	  if(null === $this->data){

	   if(!isset($this->data))$this->data = array();
	   $this->data['DIR'] = getcwd() . DIRECTORY_SEPARATOR ; 
	   $this->data['CONFIGFILE'] = $this->data['DIR'].'config.frdl.php';
	   $this->data['o'] = new \stdclass;	   
	   $this->data['data_out'] = new \stdclass;
	   $this->data['config'] = array();
	   $this->data['settings'] = new \stdclass;
	   $this->data['settings']->cli = array(
	         'frdl' => array(
	             'cli.cmd.cli' => 'frdl',
	             'cli.class' => '\frdl\ApplicationComposer\Console',
	             'cli.class.required.parent' => '\frdl\aSQL\Engines\Terminal\CLI',
	         ),
	   );
	   
	   

	     
	     $this->data['tpl_data'] = array(
	          'FILE' => htmlentities(__FILE__),
	          'URI_DIR_API' => self::URI_DIR_API,
 	          'LOCATION' => 'http://'.$_SERVER['SERVER_NAME']
 	                         .implode('/', \webdof\wURI::getInstance()->getU()->dirs)
 	                         .'/'.\webdof\wURI::getInstance()->getU()->file,
 	          'URL' => '',
 	          'EXTRA_PMX_URL' => '',
 	          
	     );	   
	   
	   $h  = parse_url($this->data['tpl_data']['LOCATION']);
	   $pu = \webdof\wURI::parse_uri($h['scheme'], $h['host'], $h['path']);
	   $path = '/';
	   foreach($pu->dirs as $num => $dir){
	   	 $path.= $dir. '/';
	   }
	   $this->data['installed'] = false;
	   $this->data['index'] = 'Main Template';	

	 
	  
	   	   
	   if(is_array($data) || is_object($data)){
	   	 foreach($data as $k => $v){
		 	if(isset($this->data[$k]))$this->data[$k] = $v;
		 }
	   }
	
	  
	   \webfan\App::God()->{'?session_started'}(true);
//		   $sessionKey = __CLASS__. sha1( $h['host'] );
       $sessionKey=__CLASS__;
       if(!isset($_SESSION[$sessionKey]))$_SESSION[$sessionKey] = array();
       $this->aSess = & $_SESSION[$sessionKey] ;
        
        
         
       $this->data['config_new'] =  $this->data['config'];
       $this->data['config'] = $this->data['config_new'];
       if(file_exists($this->data['CONFIGFILE'])){
	   	  require $this->data['CONFIGFILE'];
	   	  $this->data['installed'] = "1";
	   }else{
	   	$this->data['installed'] = "0";
	   }
       $this->data['config_new'] = (array)$this->data['config_new'];        
       $this->data['config'] = array_merge($this->data['config_new'], (array)$this->data['config']);
       $this->data['config']['INSTALLED'] = $this->data['installed'];

       

       
       
       if(isset($this->data['config']['URL'] ) && base64_decode('eyRfX0xPQ0FUSU9OX19ffQ==') === $this->data['config']['URL'] ){
	   	   $this->data['config']['URL'] = $this->data['tpl_data']['LOCATION'];
	   	  if(true === $this->debug) trigger_error(self::HINT_NOTINSTALLED, E_USER_WARNING);
	   }
       $this->data['tpl_data']['URL'] = &$this->data['config']['URL'];
       $this->data['tpl_data']['URL'] = str_replace('setup.phpsetup.php', 'setup.php', $this->data['tpl_data']['URL']);
       
       
	   $this->data['tpl_data']['URI_DIR_API'] =  $this->data['tpl_data']['URL'].'api.php';	
	   $this->data['config']['URL_API_ORIGINAL'] =  $this->data['tpl_data']['URI_DIR_API'];	
	   $this->data['config']['URL_API_ORIGINAL'] = str_replace('setup.phpapi.php', 'api.php', $this->data['config']['URL_API_ORIGINAL']);
       $this->data['tpl_data']['URI_DIR_API'] = str_replace('setup.phpapi.php', 'api.php', $this->data['tpl_data']['URI_DIR_API']);
   
   
  
    	
	  }else{
	  	if(is_array($data)){
	  	 foreach($data as $k => $v){
		 	$this->data[$k] = $v;
		 }			
		}

	  }
	 
	
	 if(!isset($path)){
	   $h  = parse_url($this->data['tpl_data']['LOCATION']);
	   $pu = \webdof\wURI::parse_uri($h['scheme'], $h['host'], $h['path']);
	   $path = '/';
	   foreach($pu->dirs as $num => $dir){
	   	 $path.= $dir. '/';
	   }
	 }
	 

		 
	  $this->data['tpl_data']['EXTRA_IS_PMX'] = (true===$this->data['config']['EXTRA']['extra']['pragmamx']['main'])
	                                             ? 'yes' : 'no';	 
		 
	  $this->data['tpl_data']['EXTRA_IS_WP'] = (true===$this->data['config']['EXTRA']['extra']['wordpress']['main'])
	                                             ? 'yes' : 'no';	 


       $this->data['template_main_options'] = array(   
                'Title' =>  'Webfan - Application Composer',
	            'css' => array(
	            
	            ),
				'meta' =>  array(
				     array('http-equiv' => 'content-type', 'content' => 'text/html; charset=utf-8'),	
				     array('http-equiv' => 'content-style-type', 'content' => 'text/css'),	
				     array('http-equiv' => 'content-script-type', 'content' => 'text/javascript'),		
				     array('http-equiv' => 'content-script-type', 'content' => 'text/javascript'),				 
				   /*  array('http-equiv' => 'X-UA-Compatible', 'content' => 'IE=7.5'),		  */
				     array('name' => 'mobile-web-app-capable', 'content' => 'yes'),
				     array('name' => 'apple-mobile-web-app-capable', 'content' => 'yes'),
				     array('name' => 'apple-mobile-web-app-status-bar-style', 'content' => 'lightblue'),
				     array('name' => 'HandheldFriendly', 'content' => 'true'),
				     array('name' => 'MobileOptimized', 'content' => '320'),
				     array('name' => 'viewport', 'content' => 'width=device-width, initial-scale=1.0, user-scalable=yes'),
				     
				     array('name' => 'flow.component.frdl.webfan.api.url', 'content' => $this->data['tpl_data']['URI_DIR_API']),
				     array('name' => 'flow.component.frdl.webfan.api.url.initial', 'content' => $this->data['tpl_data']['URI_DIR_API']),
				     				     
				     array('name' => 'webfan-registration-key', 'content' =>  (isset($this->data['config']['REGISTRATIONKEY']))?$this->data['config']['REGISTRATIONKEY']
				                                                          :(isset($this->data['config_new']['REGISTRATIONKEY']))?$this->data['config_new']['REGISTRATIONKEY']
				                                                          :''),
				                                                          
				                                                     
				 ),
				 
				
				 'link' => array(
				     /* array('rel' => 'prefetch', 'type' => 'application/l10n', 'href' => 'locale/locales.ini'), */
				      array('rel' => 'package', 'type' => 'application/package', 'href' => 'https://github.com/frdl/webfan/archive/master.zip'),
				   //   array('rel' => 'describedby', 'type' => 'application/xml', 'href' => 'config.xml'),
				      array('rel' => 'manifest', 'type' => 'application/manifest+json', 'href' => 'http://'.$_SERVER['SERVER_NAME'].'/'.ltrim(str_replace('setup.php','',$path), '/ ').'manifest.webapp'),
				     array('rel' => 'shortcut icon', 'type' => 'image/x-icon', 'href' => 'http://'.$_SERVER['SERVER_NAME'].'/favicon.ico'),  
				 ),
			    'js' => array(
				       //->later by assets installer!-> 'js/lib/flow.js',
				       //'http://api.webfan.de/api-d/4/js-api/library.js',
				       (('phar'!==$this->data['tpl_data']['INSTALLER'] && file_Exists($this->data['CONFIGFILE']) && file_exists($this->data['DIR'].'js'. DIRECTORY_SEPARATOR . 'lib'. DIRECTORY_SEPARATOR.'flow.js'))
				        ? 'js/lib/flow.js' : 'http://api.webfan.de/api-d/4/js-api/library.js'),
				        
				      //  'http://webfan.de/cdn/frdl/flow/components/frdl/intent/webintents.js',
				       
				       // 'js/app.js', 
				),
				 
	    );

	 
		 	       		 	       
	   return $this->data;	 	
	 }
	 
	 
	 

	 
	 protected function _boot(){
	 //	$this->default_boot() ;
		
	//	require  __DIR__ . DIRECTORY_SEPARATOR . self::DIR_PLUGIN . DIRECTORY_SEPARATOR . 'plugout.php';
		//	require  __DIR__ . DIRECTORY_SEPARATOR . self::DIR_PLUGIN . DIRECTORY_SEPARATOR . 'plugin.php';
		
		
	
		

	 }
	 
	 	
    public function run(&$Request =null){
       	
       if('cli' === PHP_SAPI){
 	  /*    trigger_error('This is a web app, cli support is not implemented yet completly!', E_USER_WARNING);  
 	           //maybe usable if api (cli cmd) request
 	  */
 	      chdir(dirname($_SERVER['argv'][0]));
       }  	
    	
	   	
 
    	$this->default_run($Request);
    	
       $this->out(); 
	   return $this;
	}
	
	

	
	
    protected function route($u = null){
       $u = (null === $u) ? \webdof\wURI::getInstance() : $u;
       
      $this->__todo($u);
        
       return $this;
	}



protected function process_modul($modul){
		

		 switch($modul){
		   	 default : 
		 	  case '' :
		 	       $this->template = 'ToDo..';  
		 	    break;
		 	 case '404' : 
		   	      	 $this->template = '404 - Not found.';
		   	    break;
		 	  default : 
		   	      	require __DIR__ . DIRECTORY_SEPARATOR.$modul. DIRECTORY_SEPARATOR.self::APPFILE;
		   	 break;
		 }
}
	
	
 protected function __todo(\webdof\wURI $u = null){
       $u = (null === $u) ? \webdof\wURI::getInstance() : $u;

         


	 $this->login();
	 ini_set('display_errors', (isset($this->aSess['isAdmin'])) ? $this->aSess['isAdmin'] : 0);

  
   
	   
	   
	 ob_start(function($content){
	   $parseHeaders =function($serverVars = NULL)
      {

	
      if( !is_array($serverVars))$serverVars = $_SERVER;

       $headers = array();
       foreach($_SERVER as $key=>$value)
         {
                if (substr($key,0,5)=="HTTP_") {
                     $key=str_replace(" ","-",ucwords(strtolower(str_replace("_"," ",substr($key,5)))));
                     $headers[$key]=$value;
                     if( $key == 'If-None-Match' )
                      {
                        $ifNoneMatch = $headers['If-None-Match'];
                        if(substr($ifNoneMatch, 0, 1) != '"')$ifNoneMatch = NULL;
                      }
                     if( $key == 'If-Modified-Since' )
                      {
                        $ifModifiedSince = $headers['If-Modified-Since'];
                      }
                }
      }
       return $headers;
      };

       $headers=$parseHeaders($_SERVER);
       if(isset($headers['X-Requested-With']) && 'XMLHttpRequest'===$headers['X-Requested-With']){
	
		preg_match("/<body>(.*)<\/body>/s", $content, $matches);
			//for cache GET:
			$_GET['_______X-Requested-With']='XMLHttpRequest';
			if(isset($matches[1]))$content=((isset($documentTitle)) ? '<meta name="document.title" content="'.strip_tags($documentTitle).'" />' : '').$matches[1];
	
       }	
       
      if( preg_match("/<\/html>(?<rest>.*)/s", $content, $matches)){
	     if(isset($matches['rest'])){
		 	$content=str_replace('</html>'.$matches['test'], $matches['test'].'</html>', $content);
		 }
	  }
       
      if( preg_match("/(?<start>.*)<\!DOCTYPE html>/s", $content, $matches)){
	     if(isset($matches['start'])){
		 	$content=str_replace( $matches['start'].'<!DOCTYPE html>','<!DOCTYPE html>'.$matches['start'], $content);
		 }
	  }      
       return $content; 	
	});  



     $this->modul = '404';
     
     $_u = parse_url($this->data['config']['URL']);
     $uri = substr( $u->getU()->classic['path'], strlen($_u['path']), strlen($u->getU()->classic['path']));
     $_u = explode('/',$uri);
     if(file_exists(__DIR__ . DIRECTORY_SEPARATOR.$_u[1]. DIRECTORY_SEPARATOR.self::APPFILE)){
	 	 $this->modul = $_u[1];
	 }


     $this->process_modul($this->modul);
     
              
	   return $this;
	}			
	


	


    public function OutData(){
    	$p = func_get_args();
    	if(0 === count($p)){
			return $this->data['data_out'];
		}elseif(1 === count($p)){
			$this->data['data_out'] = $p[0];
		}elseif(2 === count($p) && is_string($p[0])){
			$this->data['data_out']->{$p[0]} = $p[1];
		}else{
			return trigger_error('Invalid number of arguments in '.__METHOD__.' '.__LINE__, E_USER_ERROR);
		}
		
		return $this;
	}
	
	
	
	public function login(){
    	 	if( 
    	 	
    	 	 isset($_POST['pwd']) && isset($_POST['PIN'])
    	 	&& ((
 		 	 $this->data['config']['ADMIN_PWD'] === sha1(trim($_POST['pwd'], '"\' '))
		 	&& $this->data['config']['HOST'] === $_SERVER['SERVER_NAME']
		 	&& $this->data['config']['PIN'] ===$_POST['PIN']
		 	&& (!isset($this->data['config']['DISABLE_ADMIN_PWD']) || false === $this->data['config']['DISABLE_ADMIN_PWD'])
		    	)
		 	  || (
 		 	          $this->data['config_new']['ADMIN_PWD'] === sha1(trim($_POST['pwd'], '"\' '))
		 	       && $this->data['config_new']['HOST'] === $_SERVER['SERVER_NAME']
		 	       && $this->data['config_new']['PIN'] ===$_POST['PIN']
		 	       && (!isset($this->data['config_new']['DISABLE_ADMIN_PWD']) || false === $this->data['config_new']['DISABLE_ADMIN_PWD'])
		 	))
		 	
		 	){
 		 	    $this->aSess['ADMIN_PWD'] =  sha1(trim($_POST['pwd'], '"\' '));
		 	    $this->aSess['HOST'] = $_SERVER['SERVER_NAME'];
		 	    $this->aSess['PIN'] =$_POST['PIN'];
		 	    $this->aSess['isAdmin'] = true;
			 	session_write_close();
			 	session_start();    
			 	
			 	

	 	
			 	
			} elseif(isset($_POST['pwd']) || isset($_POST['PIN'])){
				if(isset( $this->aSess['isAdmin']))unset( $this->aSess['isAdmin']);
				if(!isset($_REQUEST['test'])){
         	    	foreach($this->aSess as $k => $v){
					   unset($this->aSess[$k]);
				   }					
				}

			}  	 
				
		
		return $this->isLoggedIn();		
	}
	
	
	public function isLoggedIn(){
       $this->isAdmin = false;


      if(true===$this->data['config']['EXTRA']['extra']['pragmamx']['main'] 
       && file_exists( $this->data['DIR'] . 'config.php')){
			try{
			  $file = $this->data['DIR'] . 'mainfile.php';
			  	
			  $func = function($file){
			  	  ob_start();
			  		@include $file;
			      ob_end_clean();		
			  };
			
			 $func($mainfile);
			
			 if(MX_IS_ADMIN){
			 	  $this->aSess['isAdmin'] = true;
			 }
			 
			
			  
			}catch(\Exception $e){
				
			}	  	
	  }


	
		
		 	if(!isset($this->aSess['isAdmin']) || true !== $this->aSess['isAdmin']){
		 		$this->isAdmin = false;
		 		unset($this->aSess['ADMINDATA']);
		 		$this->aSess['ADMINDATA'] = array(
		 		   'CONFIGFILE' => $this->data['CONFIGFILE'],
		 		);
		 		if(isset( $this->aSess['isAdmin']))unset( $this->aSess['isAdmin']);
			}else{
				   $this->aSess['ADMINDATA'] = $this->data;
				   $this->isAdmin = true;
			}	 		
			
					
		$this->aSess['isAdmin']	= $this->isAdmin;	
		return $this->isAdmin;	
	}
	
	
	
	

	
	/**
	* 
	* @param String $cmd
	* @param Array $processors default null (defaults to self settings)
	* 
	* @return mixed $result || array of [mixed result] || false || null
	* 
	*    return value is an array of corresponsing results if count($processors) > 1
	* 
	*/
	public function cmd($cmd, $processors = null/* run the comand on multiple clis, just like hooks or similar 
	
	example (default) 
	array(
	         'frdl' => array(
	             'cli.cmd.cli' => 'frdl', //) inital/shell command, you may trim it and shift it from command line 
	             'cli.class' => '\frdl\ApplicationComposer\Console', //a cli/processor class as command handler
	                                                 // MUST provide public method applyApp($this)
	                                                 // MUST provide public method exe($cmd)
	                                                 // MUST provide public method dump()  ( resultGetter )
	                                                 // MUST be subclass_of 'cli.class.required.parent' ...
	             'cli.class.required.parent' => '\frdl\aSQL\Engines\Terminal\CLI',
	         ),
	   );
	*/, &$errorlog=array(), $eLevel=/*null=>disables trigger error*/E_USER_WARNING){

	  
        	 
    if(!is_array($processors))$processors=&$this->data['settings']->cli;
    $result=(1 < count($processors)) ? array() : null;
    $mulitMode = (null===$result) ? false : true;
    $i=0;
    
	try{
	if(null === self::$_db){
		//self::$_db =\frdl\DB::_(array(
		self::$_db =  new \frdl\DB(array(
		   'driver' => $this->data['config']['db-driver'],
		   'host' => $this->data['config']['db-host'],
		   'dbname' => $this->data['config']['db-dbname'],
		   'user' => $this->data['config']['db-user'],
		   'password' => $this->data['config']['db-pwd'],
		   'pfx' => $this->data['config']['db-pfx'],
		   
		  ), false);
	}			
	}catch(\Exception $e){
		/* no explicit need of DB connection here */
	}
	 
		foreach($processors as $cmdpfx => $console){
			$t = $console['cli.cmd.cli'];
		
			$l = strlen($t);
			if(substr($cmd, 0, $l) === $t){
				$cmd = substr($cmd, $l, strlen($cmd));
				if(is_subclass_of($console['cli.class'], $console['cli.class.required.parent'])
				 && is_subclass_of($console['cli.class'], '\frdl\aSQL\Engines\Terminal\CLI')){
				try{
				   $this->Console = new $console['cli.class'];
				   $this->Console->applyApp($this);
				  
				  
				   $this->Console->exe($cmd);
				   $r = $this->Console->dump();
				   if(true===$mulitMode){
				   	   array_push($result, $r);
				   }else{
				   	   $result=$r;
				   }					
				}catch(\Exception $e){
				  if(null!==$eLevel)trigger_error('[#'.$i.'] '. $e->getMessage(), $eLevel);
				  array_push($errorlog, '[#'.$i.'] '.$e->getMessage());
				  if(true===$mulitMode){
				   	   array_push($result, null);
				   }else{
				   	   $result=null;
				   }	
				}	

			
				}else{
				  $msg='[#'.$i.'] '.'No valid Console SubClass: '.print_r($console, true);
				  if(null!==$eLevel)trigger_error($msg, $eLevel);
  				  array_push($errorlog, $msg);
				  if(true===$mulitMode){
				   	   array_push($result, null);
				   }else{
				   	   $result=null;
				   }						
					
				}
				   
			}
			
			$i++;
		}
		

	  return $result;
	}
	
		


	

} 

 
