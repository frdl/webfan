<?php
/**
 * Copyright  (c) 2015, Till Wehowski
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of frdl/webfan nor the
 *    names of its contributors may be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY frdl/webfan ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL frdl/webfan BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 *  @role       example/test
 * 
 *  @cmd "frdl test -b -d"
 * 
 */
namespace frdl\ApplicationComposer\Command;

class cache extends CMD
{


   protected $data;
   protected $file;
   
   protected $tasks;
   protected $time_last;
   
   protected $config;
   
   protected $count_tasks = 0;
   
   protected $_data;
   protected $_data_bin = null;
   protected $_checksum;
   protected $key;
   protected $container;

   function __construct(){
		parent::__construct();
	}
   

/*
$this->data['config']['DIRS']['cache']
$this->data['config']['DIRS']['tmp']
*/

    protected function k($k){
	  return preg_replace("/[^A-Za-z0-9\.\-\_\~]+$/", "", $k);
	}
	
	protected function data($data = null, $set = false){
		$this->_data = ((true == $set) ? $data : $this->_data);		
		return $this->_data;                 
	}	
	
	
	protected function file(){
		$this->_file = (($this->container === 'tmp') ? $this->data['config']['DIRS']['tmp'] : $this->data['config']['DIRS']['cache'])
		                 . DIRECTORY_SEPARATOR . 'cache~.'.$this->k($this->key).'.php';		
		return $this->_file;                 
	}

    protected function write(){
    	if(null === $this->_file || '' === $this->_file)return;
    	 
    	$now = time();
        $bs = new \frdl\webfan\Serialize\Binary\bin();
        $this->_data_bin = base64_encode($bs->serialize($this->_data));
        $this->_checksum = sha1($this->_data_bin);
        $checksum = $this->_checksum;
        $key = $this->key;
        $expires = $this->expires_write;
        
						$php = "<?php
/**
*  - Do not edit this file manually! 
*  
*   Application Composer 
*		 - Download: http://www.webfan.de/install/
*			 			     
*    Cache Data File
*			 			  
*    @#key:        ".$key."
*    @#time:       ".$now."
*    @#expires:    ".$expires."		
*    @#checksum:   ".$checksum."	 			  
*			 			  
*/
if(isset(\$this) &&
	 ( 
			 			            get_class(\$this) === '\\frdl\xGlobal\webfan' 
			 			         || is_subclass_of(\$this, '\\frdl\ApplicationComposer\Command\CMD')  
			 			         || get_class(\$this) === 'frdl\xGlobal\webfan' 
			 			         || is_subclass_of(\$this, 'frdl\ApplicationComposer\Command\CMD')
	 )
  && is_subclass_of(\$this, 'frdl\ApplicationComposer\Command\cache'
){	
";

$php .= "\$this->_cache_key =  ".var_export($key, true).";\$this->_cache_time =  ".var_export($now, true).";\$this->_cache_expires = ".var_export($expires, true).";
if( \$this->_cache_expires < time())return \$this->expired();
\$this->_checksum =  ".var_export($checksum, true).";
";

if(isset($this->argtoks['flags']['s'])){
	$php.=" \$this->_data_bin = ".var_export($this->_data_bin, true).";";
}else{
	$php.="\$this->_data = ".var_export($this->_data, true).";"
}


$php.= "                        	   	
                         	   				
}		 			
";

  		try{
			chmod($this->_file,0755);
		}	catch(\Exception $e){
			
		} 			
		if(false !== file_put_contents($this->_file, $php))	 			{
		try{
			chmod($this->_file,0644);
		}	catch(\Exception $e){
			
		} 				
			return true;
		}else{
			return false;
		}                      
                        
	}

    protected function read(){
    	if(null === $this->_file || '' === $this->_file || !file_exists($this->_file)){
    		  $this->result->out = 'No cache file found';
    		  return  false;
    		}
    	
    	    $this->_data_bin = null;
			require $this->_file;         
			if(null !== $this->_data_bin){
				 $bs = new \frdl\webfan\Serialize\Binary\bin();
				 $this->_data = $bs->unserialize(base64_decode($this->_data_bin));
			}
			        
            $this->result->data = $this->_data;
            return true;            
	}

    public function process()
    {
       $args = func_get_args();


		if(true!== $this->loadConfigFromFile(true)){
                $this->result->out = 'set config ERROR: cannot readf config file';
        	 return;			
		}
		
		
		$this->expires_write = time() + 24 * 60 * 60;
		$this->expires_read = time() - 24 * 60 * 60;
		$this->expires = $this->getRequestOption('expires');
		if(null !== $this->expires && is_numeric($this->expires)) {
		    $this->expires_write = time() + intval($this->expires);
		    $this->expires_read = time() - intval($this->expires);			      
	    }
		
		
		$this->_file = null;
		$this->container = $this->getRequestOption('store');		
		$this->key = $this->getRequestOption('key');
		if(null === $this->key){
			 $this->result->out = htmlentites('No key given, please provide --key="..."');
			 trigger_error($this->result->out, E_USER_ERROR);
			return;
		}else{
			$this->key = $this->k($this->key);
		}
		

		if(null === $this->container )$this->container  = 'cache';
        $this->file();
              
        
       	if(isset($this->argtoks['flags']['w'])){
       		  if(!isset($this->aSess['isAdmin']) || true !== $this->aSess['isAdmin'] ){
                $this->result->out = 'set config ERROR: You are not logged in as Admin';
  	            return;
		      }
	
	
	    $this->content = $this->getRequestOption('content');		
		if(null !== $this->content && isset($_SESSION[$this->content])){
			$this->_data = $_SESSION[$this->content];
		}elseif(null !== $this->content){
          $this->_data = json_encode( $this->content );
		}
			      
		      
			 $this->write();
		}
		
		
	    if(isset($this->argtoks['flags']['r'])){
			 if(true !== $this->read()){
			 	return;
			 }elseif($this->_cache_expires < time() || $this->_cache_time < $this->expires_read){
				$this->expired();
			 	return;
			 }else{
			 	 $this->result->data = $this->_data;
			 }

		}		
        
        
        $this->result->out = 'Cache command executed.';
        
        return $this->result;
    }
    
    
    protected function expired(){
	    $this->result->out = 'The cached content is expired!';
		$this->result->expired = true;
		$this->result->expired_since =$this->_cache_expires;
	}

    
    public function required()
    {
       $args = func_get_args();
    }
}